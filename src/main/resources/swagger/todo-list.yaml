openapi: 3.0.3
info:
  title: Todo List API
  description: |-
    This api is responsible for containing the methods for TodoList.
  contact:
    email: weltoncrs@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: auth
    description: Generate auth token-jwt
  - name: task
    description: API task

paths:
  /api/v1/auth/oauth/token-jwt:
    post:
      tags:
        - auth
      summary: Generate token-jwt
      operationId: postToken
      requestBody:
        description: Generate token jwt
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception

  /api/v1/task:
    get:
      tags:
        - task
      summary: Finds Tasks by user and status
      description: Returning tasks by user and status
      operationId: findTasksByUserAndStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - COMPLETED
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid status value
    post:
      tags:
        - task
      summary: Insert tasks by user
      description: Insert taks by user logged.
      operationId: insertTasksByUser
      requestBody:
        description: Create new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request body
        '401':
          description: Not Authorized

  /api/v1/task/{taskId}:
    put:
      tags:
        - task
      summary: Update task by ID
      description: ''
      operationId: updateTaskById
      parameters:
        - name: taskId
          in: path
          description: ID of task to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid ID supplied or request body
        '401':
          description: Not Authorized
        '404':
          description: Task not found update
    delete:
      tags:
        - task
      summary: Delete  task by ID
      description: ''
      operationId: deleteTaskById
      parameters:
        - name: taskId
          in: path
          description: ID of task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: successful operation
        '400':
          description: Invalid ID supplied
        '401':
          description: Not Authorized
        '404':
          description: Task not found delete

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        clientId:
          type: string
          example: aaaaaaa21aa21a1a2
        clientSecret:
          type: string
          example: aaaaaaa21aa21a1a2
    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: daffasfsadfasfasfasfasfasfasf.fdasfasffdfsdafasfas.fdsfasfafasdfa
        tokenType:
          type: string
          example: Bearer
        expiresIn:
          type: string
          example: '30000'
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Death Star
        description:
          type: string
          example: Getting plans of destroy Death Star
        status:
          type: string
          example: 'PENDING'
        user:
          type: string
          example: 'Obi-Wan Kenobi'
    TaskRequest:
      type: object
      properties:
        name:
          type: string
          example: Who is my soon?
        description:
          type: string
          example: I think Luke is my soon.
        status:
          type: string
          default: PENDING
          enum:
            - PENDING
            - COMPLETED